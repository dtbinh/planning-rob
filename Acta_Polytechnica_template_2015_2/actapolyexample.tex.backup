\documentclass[eprint]{actapoly}

\usepackage{algorithm}
\usepackage{algpseudocode}
\usepackage{draftwatermark}
\SetWatermarkText{DRAFT}
\SetWatermarkScale{1}
\SetWatermarkLightness{0.9}

\begin{document}

%\title[Example of an Article with a Long Title]
%{Example of an Article with a Long Title, the Title Should Be Capitalised Properly in the Code Long Long}
\title[Trajectory Generation Approach]
{Trajectory Optimization}

\correspondingauthor[E. Lucet]{Eric Lucet}{my}{eric.lucet@cea.fr}
\author[J. M. Mendes Filho]{Jos\'{e} Magno Mendes Filho}{my,their}

\institution{my}{CEA, LIST, Interactive Robotics Laboratory, Gif-sur-Yvette, F-91191, France}
\institution{their}{ENSTA Paristech, Unit\'{e} informatique et Ing\'{e}nierie des Syst\'{e}me, 828 boulevard des Marechaux, 91762, France}
%\institution{their}{ENSTA Paristech, Unit\'{e} informatique et Ingénierie des Système, 828 boulevard des Marechaux, F-91762, France}
%\institution{their}{CEA, LIST, Interactive Robotics Laboratory, Gif-sur-Yvette, F-91191, France}

\begin{abstract}
\end{abstract}

\keywords{}

\maketitle




\section{Introduction}




All mobile robots consisting of a solid block in motion are flat systems~\cite{Defoort2007a}.

A flat system presents the property that states and inputs can be written in terms of the flat outputs $z$ and its derivatives.
Thus, all system behavior can be expressed by the flat outputs and a finite number of its derivatives ($l$).

TODO reference Veeraklaew et al. in [106] firstly combines the concepts of differential flatness and sequential quadratic programming.

TODO discussion about how to find the mapping $(q, u) \rightarrow z$ (look up Millan 2003).

The approach proposed by Defoort/Milam (and others) takes advantage of the flatness property and search a solution for
the nonholonomic motion planning problem in the flat space rather than in the configuration space of the mobile robot.

In addition, their approach use B-splines for representing the solution in the flat space. This provide a small local support (TODO verify and elaborate) able to represent
complex trajectories.

Finally a trajectory optimization routine is done that accounts for all constraints (nonholonomic, geometric and bounded-input) finding an appropriate
solution.

This approach such as just described assume full knowledge of the environment where the mobile robot is to execute its motion. Defoort adapts this
method to a sliding window architecture where the motion planning problem is devised throughout time as the mobile robot evolves in its environment and
discover it.
%By relaxing the final state constraints, changing the objective function of the NLP and planning for a fixed timespan $T_p$ his new planner
%dynamically generates the trajectory as the robot moves.

Furthermore, another adaptation of this method is done in \cite{Defoort2007a} for multi robot systems. Thanks to an exchange of information
among the different robots they can adapt theirs trajectories to avoid robot-to-robot collisions and loss of communication in a decentralized fashion.


\section{Mono-robot sliding window planning algorithm}

%Defoort give in \cite{Defoort2007a} an example showing how a unicycle model can be written using the flatness property.
%The basis algorithm for planning for a mono robot is based on the optimization problem shown in equations~\ref{eq:} and~\ref{eq:}.
TODO present method or make reference to Defoort introducing $T_c$, $T_p$ etc.

However, two aspects of the implementation of this algorithm are neglected in~\cite{Defoort2007a}: the initial values for
the control points and the procedure for reaching a desired final state.

%\begin{align}
%	\underset{(C_{(0,\tau_k)},\dotsc,C_{(d+n_{knot}-2,\tau_k)})}{\mathrm{min}} J_{\tau_k} =
%\nonumber\\
%	\|\varphi_1(z(\tau_k+T_p,\tau_k),\dotsc,z^{(l-1)}(\tau_k+T_p,\tau_k))-q_{final}\|^2
%\end{align}
%
%under the following constraints $\forall t \in [\tau_k, \tau_k+T_p]$:
%\begin{equation}%\label{eq:sysr4}
%\left\lbrace\begin{array}{lcl}
%	\varphi_1(z(\tau_{k},\tau_{k}),\dotsc,z^{(l-1)}(\tau_k,\tau_k)) & = & q_{ref}(\tau_k,\tau_{k-1})\\
%    \varphi_2(z(\tau_{k},\tau_{k}),\dotsc,z^{(l)}(\tau_k,\tau_k)) & = & u_{ref}(\tau_k,\tau_{k-1})\\
%    \varphi_2(z(t,\tau_k),\dotsc,z^{(l)}(t,\tau_k)) &\in& \mathcal{U}\\
%    d_{O_m}(t,\tau_k) &\geq& \rho + r_m,\quad \forall O_m \in \mathcal{O}(\tau_k)
%\end{array}\right.
%\end{equation}
%

%The following pseudo code explains the planning process. Procedures PlanSec and PlanLastSec formulate the NLP and
%call the an optimization method that can handles equations and inequations constraints.


%A flat system has the important property that the states and the inputs
%can be written in terms of the outputs $z$ and their derivatives. Thus, the behavior
%of the system is determined by the flat outputs. Note that the map w is bijective(simple unicycle and simple car models for instance)
%have what is called flatness property~\ref{TODO}. 

%This property means that TODO.

%TODO system flatness

%TODO put image of the rejected trajectory??

%\begin{algorithm}[h]
%\begin{algorithmic}
%%\While{$d_{rem} \geq d_{min} + T_c \times v_{max}$}
%%\State \Call{{\scshape plan_sec}}{a}
%%\EndWhile
%%\Stae \Call{{\scshape rescale_pbl}}{a}
%%\State \Call{{\scshape plan_last_sec}}{a}
%\Function {{\scshape hpn}}{$currentState, goal , operators, absLevel , world$}
%	\If {holds(goal , currentState)}
%		\State \Return {\scshape True}
%	\Else
%    	\State $p \gets ${\scshape plan}$(currentState, goal , operators, absLevel)$
%		\For {$(o_i , g_i ) \in p$}
%			\If {{\scshape prim}$(o_i)$}
%				\State $currentState \gets world.${\scshape execute}$(o_i)$
%			\Else
%            	\State \Call{{\scshape hpn}}{$currentState, g_i , operators, ${\scshape nextLevel}$(absLevel, o_i), world$}
%    		\EndIf
%        \EndFor
%    \EndIf
%\EndFunction
%\end{algorithmic}
%\end{algorithm}


\subsection{Initialization}


%\subsection{Solving NLP}
The initialization of the solution paths used for each NLP solving is important for two reasons:
\begin{itmeze}
 \item
A good initialization allows the
optimization solver to find a better solution for a given timespan.
 \item
When using a local optimization method the initialization
can drag the final solution to one or other local minima.
\end{itmeze}

The simplest of initializations was performed in ours studies. Linear spacing from current flat output value to the estimate final flat output.
The estimate final output is simply the flat output computed from the estimate final states and inputs. The estimate final states and inputs
are computed assuming a displacement from the current position of the maximum linear speed
of the robot times the planning horizon, and assuming that the direction of the movement is equal to (final position - current pos) vector.

TODO talk about the too close obstacles problem and the dumb solution.

\subsection{Stop condition and last NLP}


As the robot evolves its state approximates to the final state. 
%That is the  since the distance between current and final state is what is to be minimized.
At some point the constraints associated to the final state shall be integrated into the NLP and the timespan for performing this last
step shall not be fixed and must be one of the values calculated.
%The fixed planning horizon has to be made variable in order to get to the final state.

The criterion used to pass from the NLP used during for the initial and intermediates steps to the last step NLP 
is define below in the equation~\ref{eq:stopcond}:

\begin{align}
  d_{rem} \geq d_{min} + T_c \cdot v_{max}
\end{align}

This way we insure that the last planning section will be done for at least a $d_{min}$ distance from the robot's final position.
This minimal distance is assumed to be sufficient for the robot to reach the final state.

After stopping the sliding window algorithm we calculate new parameters for the solution representation and computation taking into
account the estimate remaining distance.

The following pseudo code summarizes the algorithm: 

\begin{algorithm}
    \caption{Sliding window planning algorithm\label{cod:algo}}
    \label{swpa}
    \begin{algorithmic}[1] % The number tells where the line numbering should start
        \Procedure{Plan}{} %\Comment{The g.c.d. of a and b}
	    \State $knots \gets $\Call{GenKnots}{$t_p,d_{spl},n_{knots}$}
	    \State $time \gets $\Call{LineSpacing}{$0,t_p,n_{s}$}
	    %\State $z_{latest} \gets $\Call{$\varphi_0$}{$q_{initial}$}
	    \State $q_{latest} \gets q_{initial}$
	    %\State $ctrlpts \gets $\Call {InitCtrlPts}{$q_{initial},q_{final},T_p,u_{max}$}
	    %\State \Call{Init}{}
	    \State $d_{rem} \gets |${\scshape Pos}$(q_{final}) - ${\scshape Pos}$(q_{latest})|$
	    \While{$d_{rem} \geq d_{min} + T_c \cdot v_{max}$}	
		\State $q_{latest} \gets $\Call{PlanSec}{}
		\State $d_{rem} \gets |${\scshape Pos}$(q_{final}) - ${\scshape Pos}$(q_{latest})|$
		
	    \EndWhile\label{planningwhile}
	    %\State \Call{RescalePbl}{}
	    \State $s \gets $\Call {Min}{$\tfrac{d_{rem}}{v_{max}\cdot t_p}, 1.0$}
	    \State $n_{knots} \gets $\Call{Max}{\Call{Round}{$s\cdot n_{knots}$}$, d_{spl}$}
	    \State $n_{s} \gets $\Call {Max}{\Call{Round}{$s\cdot n_{s}$}$, n_{knots} + d_{spl}$}
	    \State $\Delta t \gets $\Call{PlanLastSec}{}
	    
%            \State $r\gets a \bmod b$
%            \While{$r\not=0$} %\Comment{We have the answer if r is 0
%                \State $a \gets b$
%                \State $b \gets r$
%                \State $r \gets a \bmod b$
%            \EndWhile\label{euclidendwhile}
%            \State \textbf{return} $b$%\Comment{The gcd is b}
        \EndProcedure
    \end{algorithmic}
\end{algorithm}



\section{Decentralized multi robot sliding window planning algorithm}



A straight forward extension of the previous algorithm can be done in order to
support a multi robot system. The sliding window algorithm presented before remains
virtually the same. The changes are done within the {\scshape PlanSec} {\scshape PlanLastSec} routine.

After solving the NLP stated before each robot will have generated an intended trajectory that would be valid
if we were dealing with a mono robot system.
For the multi robot system some exchange of information among the robots and possibly some replanning has to be done.

Right after solving the standalone NLP a given robot represented by the index $i$ computes a conflict list that is based on 
all robots' positions as of when they started planning their intended trajectories (solving the latest standalone NLP).
This conflict list contains the indexes of
the robots in the fleet that can possibly cause some conflict. The word conflict here is understood as a collision or a loss of communication
between robots in the fleet.

Notice that the $i$ robot can compute its conflict list as soon as it finishes its planning even though other robots may still be doing so.

For the next step of replanning all robots involved in a conflict have to be done computing the first standalone planning. This is needed simply because
all intended trajectories will be taken into account on the replanning part.

Using the intended trajectory as the initialization of the optimization parameters a new NLP is solved where collision avoidance between robots
and keeping communication are translated into constraints.

After solving this second NLP, the trajectories are updated and the planning goes on to the next section.

In Figures~\ref{fig:collision} and \ref{fig:nocollision} the results of the decentralized multi robot algorithm can be seen.
In Figure~\ref{fig:collision} no conflict handling is done and two collisions zones can be identified.
For trajectory showed in the Figure~\ref{fig:nocollision} the robots optimize their trajectories using the multi robot
adaptation of the algorithm. No conflict occurs and we can observe a change in the robots velocities and total execution time.


%Conflict detection is computed TODOThe additional constraints associated to the multi robot system TODO  \centering

\begin{figure}[!h]\centering
  \includegraphics[width=\linewidth]{./images/collision/multirobot-path.png} % <-- use this for your graphics
  %\rule{5cm}{5cm} % <-- this is just a black box substitute for graphics
  \\[1mm]
  \includegraphics[width=\linewidth]{./images/collision/multirobot-vw.png} % <-- use this for your graphics
  %\rule{5cm}{5cm} % <-- this is just a black box substitute for graphics
  \caption{Our results: black box (top) and black box (bottom).\label{fig:collision}}
\label{fig:res}
\end{figure}

\begin{figure}\centering
  \includegraphics[width=\linewidth]{./images/no_collision/multirobot-path.png} % <-- use this for your graphics
  %\rule{5cm}{5cm} % <-- this is just a black box substitute for graphics
  \\[1mm]
  \includegraphics[width=\linewidth]{./images/no_collision/multirobot-vw.png} % <-- use this for your graphics
  %\rule{5cm}{5cm} % <-- this is just a black box substitute for graphics
  \caption{Our results: black box (top) and black box (bottom).\label{fig:nocollision}}
\label{fig:res}
\end{figure}


\subsection{Conflict detection}

Conflict detection is computed TODO

\subsection{Aditional constraints}

The additional constraints associated to the multi robot system TODO



\section{Parameters' impact analyses}

Four criteria considered important for the validation of this method were studied.
We tested different parameters configuration and scenario in order to understand how they influence
those criteria.
The four criteria were:

\begin{itemize}

\item
\textit{Maximum computation time} over the computation horizon ($MCT/T_c$ ratio);

\item
Obstacle penetration area ($P$).

\item
The total execution time ($T_{tot}$);

%\item
%Distance inter robots???;

\item
Additional time for conflict handling???.

\end{itemize}

\subsection{Maximum computation time over computation horizon $MCT/T_c$}

The significance of this criterion lays in the need of quarantining the real-time property of this algorithm.
In a real implementation of this approach the computation horizon would have always to be superior than the
maximum time took for computing a planning section (robot-to-robot conflict taken into account).

Based on several simulations with different scenarios we were able to TODO

\begin{itemize}
 \item 
 
\end{itemize}

\begin{figure}[!h]\centering
  \includegraphics[width=\linewidth]{./images/drho/drho-rmp.png} % <-- use this for your graphics
  %\rule{5cm}{5cm} % <-- this is just a black box substitute for graphics
  \caption{Increasing of detection radius and impact on a $MTC/T_c$ ration\label{fig:drho}}
\label{fig:res}
\end{figure}

\subsection{Obstacle penetration $P$}

\ref{fig:pen}
TODO rescale images

\begin{figure}[!h]\centering
  \includegraphics[width=\linewidth]{./images/penetration/pen-nsi.eps} % <-- use this for your graphics
  %\rule{5cm}{5cm} % <-- this is just a black box substitute for graphics
  \caption{Obstacle penetration decreasing as sampling increases\label{fig:pen}}
\label{fig:res}
\end{figure}




\subsection{Total execution time $T_{tot}$}

TODO Comparison with the other method;
TODO Before concluding do comparison with other approach and make sure to have multi-robot stuff

\section{Conclusions}



%\begin{nomenclature}
%\item[kg\,m^-3]{\varrho}{Liquid density}
%\item[Pa]{p}{Liquid pressure}
%\medskip
%\item{\mathit{Re}}{Reynold's number}

%\begin{acknowledgements}
%G.~Surname was supported by grant 1234567890.
%\end{acknowledgements}

TODO perspectives
Analise influence of dynamics of system, sensors, communication latency;

\bibliographystyle{actapoly}
\bibliography{biblio}

\end{document}
